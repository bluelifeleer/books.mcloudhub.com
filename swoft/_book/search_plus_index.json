{"./":{"url":"./","title":"Swoft简介","keywords":"","body":"Swoft简介 Swoft简介 Swoft 框架是首个基于 Swoole 原生协程的新时代 PHP 高性能协程全栈框架，内置协程网络服务器及常用的协程客户端，常驻内存，不依赖传统的 PHP-FPM 全异步非阻塞 IO 实现，以类似于同步客户端的写法实现异步客户端的使用，没有复杂的异步回调，没有繁琐的 yield，有类似 Go 语言的协程，灵活的注解 强大的全局依赖注入容器、完善的服务治理、灵活强大的 AOP、标准的 PSR 规范实现等 Swoft特性 1：高效路由控制器 提供灵活的注解路由，通过一个注解即可定义一个路由，简单快捷高效灵活。 2：AOP面向切面编程实现原理 AOP 框架底层是通过动态代理模拟实现。代理是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问，代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。 3：事务管理 事务之前使用同一个连接，保证事务操作的原子性。 4：RPC 服务 RPC 采用 TCP 实现，支持降级、自动注册、服务发现等等服务治理。 文档连接：https://www.swoft.org/ Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 14:16:11 "},"swoft/env-devlopment.html":{"url":"swoft/env-devlopment.html","title":"Swoft环境搭建","keywords":"","body":"Swoft环境搭建 环境必要的依赖需求： 安装PHP并且版本至少 >7.0，推荐 7.1+ 安装php包管理器 composer 安装redis的异步客户端 hiredis 连接迭代器依赖 pcre 库 安装php扩展swoole, 并且版本至少 >=2.1 swoole开启协程和异步redis 其他需要安装和启用的php扩展有：PDO 有冲突扩展： 面列出一些已知的和swoole有冲突的php扩展，请使用swoft时不要安装或禁用它们： xdebug xhprof blackfire zend trace uopz 文档连接：https://doc.swoft.org/master/zh-CN/quickstart/enviroment.html Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 14:21:23 "},"swoft/install.html":{"url":"swoft/install.html","title":"Swoft安装","keywords":"","body":"Swoft安装 composer安装 对于composer不清楚的可以查看这里。 componse create-project swoft/swoft project_name 手动安装 git clone https://github.com/swoft-cloud/swoft cd swoft composer install --no-dev # 不安装 dev 依赖会更快一些 cp .env.example .env vim .env # 根据需要调整启动参数 Docker方式安装 docker run -p 80:80 swoft/swoft Docker-Compose 安装 git clone https://github.com/swoft-cloud/swoft cd swoft docker-compose up 文档连接：https://doc.swoft.org/master/zh-CN/quickstart/install.html Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 14:26:31 "},"swoft/quick-start/":{"url":"swoft/quick-start/","title":"Swoft快速启动","keywords":"","body":"Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 15:03:58 "},"swoft/quick-start/service-mange.html":{"url":"swoft/quick-start/service-mange.html","title":"服务启动与管理","keywords":"","body":"服务启动与管理 帮助管理 Swoft 拥有完善的命令行工具，和相应的服务器管理命令 [root@85bd720bdc90 swoft]# php bin/swoft -h ____ __ _ / ___|_ _____ / _| |_ \\___ \\ \\ /\\ / / _ \\| |_| __| ___) \\ V V / (_) | _| |_ |____/ \\_/\\_/ \\___/|_| \\__| Usage: php bin/swoft -h {command} [arguments] [options] Commands: app There are some help command for application[built-in] dev Some commands for application dev[built-in] entity The group command list of database entity gen Generate some common application template classes[built-in] rpc The group command list of rpc server server The group command list of HTTP-Server test Test command ws There are some commands for manage the webSocket server Options: -h, --help Display help information -v, --version Display version information HTTP 服务器 是否同时启动RPC服务器取决于 .env 文件配置 // 启动服务，根据 .env 配置决定是否是守护进程 php bin/swoft start // 守护进程启动，覆盖 .env 守护进程(DAEMONIZE)的配置 php bin/swoft start -d // 重启 php bin/swoft restart // 重新加载 php bin/swoft reload // 关闭服务 php bin/swoft stop WebSocket 服务器 启动WebSocket服务器,可选是否同时支持http处理 // 启动服务，根据 .env 配置决定是否是守护进程 php bin/swoft ws:start // 守护进程启动，覆盖 .env 守护进程(DAEMONIZE)的配置 php bin/swoft ws:start -d // 重启 php bin/swoft ws:restart // 重新加载 php bin/swoft ws:reload // 关闭服务 php bin/swoft ws:stop RPC 服务器 使用独立的RPC服务器 // 启动服务，根据 .env 配置决定是否是守护进程 php bin/swoft rpc:start // 守护进程启动，覆盖 .env 守护进程(DAEMONIZE)的配置 php bin/swoft rpc:start -d // 重启 php bin/swoft rpc:restart // 重新加载 php bin/swoft rpc:reload // 关闭服务 php bin/swoft rpc:stop Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 14:56:22 "},"swoft/quick-start/env.html":{"url":"swoft/quick-start/env.html","title":"env环境配置","keywords":"","body":"env环境配置 在执行 composer install 的时候程序会自动复制环境变量配置文件。 若没有，可手动复制项目根目录的 .env.example 并命名为 .env 可用配置项 下面是官方的 .env 文件支持的env配置项, 你也可以按需添加自己需要的配置 # Application TIME_ZONE=Asia/Shanghai LOG_ENABLE=false APP_DEBUG=false # Server PFILE=@runtime/swoft.pid PNAME=php-swoft TCPABLE=true CRONABLE=false AUTO_RELOAD=true AUTO_REGISTER=false # HTTP HTTP_HOST=0.0.0.0 HTTP_PORT=80 HTTP_MODE=SWOOLE_PROCESS HTTP_TYPE=SWOOLE_SOCK_TCP # WebSocket WS_ENABLE_HTTP=true # TCP TCP_HOST=0.0.0.0 TCP_PORT=8099 TCP_MODE=SWOOLE_PROCESS TCP_TYPE=SWOOLE_SOCK_TCP TCP_PACKAGE_MAX_LENGTH=2048 TCP_OPEN_EOF_CHECK=false # Crontab CRONTAB_TASK_COUNT=1024 CRONTAB_TASK_QUEUE=2048 # Swoole Settings WORKER_NUM=1 MAX_REQUEST=100000 DAEMONIZE=0 DISPATCH_MODE=2 TASK_IPC_MODE=1 MESSAGE_QUEUE_KEY=1879052289 TASK_TMPDIR=/tmp/ LOG_FILE=@runtime/logs/swoole.log TASK_WORKER_NUM=1 PACKAGE_MAX_LENGTH=2048 OPEN_HTTP2_PROTOCOL=false SSL_CERT_FILE=/path/to/ssl_cert_file SSL_KEY_FILE=/path/to/ssl_key_file # Database Master nodes DB_NAME=dbMaster DB_URI=127.0.0.1:3306/test?user=root&password=123456&charset=utf8,127.0.0.1:3306/test?user=root&password=123456&charset=utf8 DB_MIN_ACTIVE=5 DB_MAX_ACTIVE=10 DB_MAX_WAIT=20 DB_MAX_WAIT_TIME=3 DB_MAX_IDLE_TIME=60 DB_TIMEOUT=2 # Database Slave nodes DB_SLAVE_NAME=dbSlave DB_SLAVE_URI=127.0.0.1:3306/test?user=root&password=123456&charset=utf8,127.0.0.1:3306/test?user=root&password=123456&charset=utf8 DB_SLAVE_MIN_ACTIVE=5 DB_SLAVE_MAX_ACTIVE=10 DB_SLAVE_MAX_WAIT=20 DB_SLAVE_MAX_WAIT_TIME=3 DB_SLAVE_MAX_IDLE_TIME=60 DB_SLAVE_TIMEOUT=3 # Redis REDIS_NAME=redis REDIS_DB=2 REDIS_URI=127.0.0.1:6379,127.0.0.1:6379 REDIS_MIN_ACTIVE=5 REDIS_MAX_ACTIVE=10 REDIS_MAX_WAIT=20 REDIS_MAX_WAIT_TIME=3 REDIS_MAX_IDLE_TIME=60 REDIS_TIMEOUT=3 REDIS_SERIALIZE=1 # other redis node REDIS_DEMO_REDIS_DB=6 REDIS_DEMO_REDIS_PREFIX=demo_redis_ # User service (demo service) USER_POOL_NAME=user USER_POOL_URI=127.0.0.1:8099,127.0.0.1:8099 USER_POOL_MIN_ACTIVE=5 USER_POOL_MAX_ACTIVE=10 USER_POOL_MAX_WAIT=20 USER_POOL_TIMEOUT=200 USER_POOL_MAX_WAIT_TIME=3 USER_POOL_MAX_IDLE_TIME=60 USER_POOL_USE_PROVIDER=false USER_POOL_BALANCER=random USER_POOL_PROVIDER=consul # User service breaker (demo service) USER_BREAKER_FAIL_COUNT = 3 USER_BREAKER_SUCCESS_COUNT = 6 USER_BREAKER_DELAY_TIME = 5000 # Consul CONSUL_ADDRESS=http://127.0.0.1 CONSUL_PORT=8500 CONSUL_REGISTER_NAME=user CONSUL_REGISTER_ETO=false CONSUL_REGISTER_SERVICE_ADDRESS=127.0.0.1 CONSUL_REGISTER_SERVICE_PORT=8099 CONSUL_REGISTER_CHECK_NAME=user CONSUL_REGISTER_CHECK_TCP=127.0.0.1:8099 CONSUL_REGISTER_CHECK_INTERVAL=10 CONSUL_REGISTER_CHECK_TIMEOUT=1 Copyright © books.mcloudhub.com Python 2018 all right reserved，powered by Gitbook修改时间： 2019-02-23 15:09:05 "}}